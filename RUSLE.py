# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# RUSLE.py
# Created on: 2023-10-09 10:58:21.00000
#   (generated by ArcGIS/ModelBuilder)
# Usage: RUSLE <DEM150> <LU> <NDVI> <K_factor> <R_Factor> <L_factor> <S_factor> <P_factor> <SE> <SE_table>
# Description: Python 2.x environment is required.
# ---------------------------------------------------------------------------


# Import arcpy module
from __future__ import print_function

import arcpy
import time

# Setting Environment
arcpy.env.overwriteOutput = True

print(time.asctime(time.localtime(time.time())), end='')
print("  ", end="")
print("Setting parameters......")

# Global variables: Time span and step length of the research period
year_list = [["A", [1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000]],
            ["B", [2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010]],
            ["C", [2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020]]]

year_list = [["A", [1985, 1986, 1987, 1988, 1989, 1990, 1991]],
            ["C", [2015, 2016, 2017, 2018, 2019, 2020]]]

marker_list = ["A", "B", "C"]  # 1985-2005: "00", 2006-2020："10"

# Script arguments: Input dataset
DEM = "E:\\SoilErosion_TGR\\InputDatasets\\DEM\\dem150_{marker}.tif"
LUC = "E:\\SoilErosion_TGR\\InputDatasets\\LUC\\CLCD_v01_{year}.tif"
NDVI = "E:\\SoilErosion_TGR\\InputDatasets\\NDVI\\ndvi{year}.tif"
R = "E:\\SoilErosion_TGR\\InputDatasets\\R_factor\\R{year}.tif"

K = "E:\\SoilErosion_TGR\\InputDatasets\\K_factor\\K_factor.tif"                # Global variables
Zonal_area = "E:\\SoilErosion_TGR\\InputDatasets\\TGR.shp"                      # Global variables

# Script arguments: Output dataset
SE = "E:\\SoilErosion_TGR\\OutputDatasets\\SE\\SE{year}.tif"
SE_table = "E:\\SoilErosion_TGR\\OutputDatasets\\Statistic\\SE_Tab{year}.dbf"   #

# Local variables: Intermediate dataset
fillDEM = "E:\\SoilErosion_TGR\\OutputDatasets\\Intermediate_data\\fill.tif"
flow_dir = "E:\\SoilErosion_TGR\\OutputDatasets\\Intermediate_data\\flow_dir.tif"
flow_acc = "E:\\SoilErosion_TGR\\OutputDatasets\\Intermediate_data\\flow_acc.tif"
slope_L = "E:\\SoilErosion_TGR\\OutputDatasets\\Intermediate_data\\slope_l.tif"
slope_p = "E:\\SoilErosion_TGR\\OutputDatasets\\Intermediate_data\\slope_p.tif"
slope_d = "E:\\SoilErosion_TGR\\OutputDatasets\\Intermediate_data\\slope_d.tif"
Output_drop_raster = ""

C_type = "E:\\SoilErosion_TGR\\OutputDatasets\\Intermediate_data\\C_types.tif"
P_s = "E:\\SoilErosion_TGR\\OutputDatasets\\Intermediate_data\\P_s.tif"
P_Sub = "E:\\SoilErosion_TGR\\OutputDatasets\\Intermediate_data\\P_Sub.tif"
LU = "E:\\SoilErosion_TGR\\OutputDatasets\\Intermediate_data\\LU.tif"  # reclassified

M = "E:\\SoilErosion_TGR\\OutputDatasets\\Intermediate_data\\m_{marker}.tif"
S = "E:\\SoilErosion_TGR\\OutputDatasets\\Factor\\S_{marker}.tif"
L = "E:\\SoilErosion_TGR\\OutputDatasets\\Factor\\L_{marker}.tif"

C = "E:\\SoilErosion_TGR\\OutputDatasets\\Factor\\C_{year}.tif"
P = "E:\\SoilErosion_TGR\\OutputDatasets\\Factor\\P_{year}.tif"


# **********************************************************************************************************************
# Calculating soil erosion
# **********************************************************************************************************************

print(time.asctime(time.localtime(time.time())), end='')
print("  ", end="")
print("Iterating DEM data set......")
# iteration: DEM
for mk, year in [year_list[0]]:  # 两组不同时期DEM数据，减少计算量
    # *************L-S-factor********************
    # Update input DEM dataset
    DEM_f = DEM.format(marker=mk)
    M_f = M.format(marker=mk)
    L_f = L.format(marker=mk)
    S_f = S.format(marker=mk)

    # Process: Fill
    arcpy.gp.Fill_sa(DEM_f, fillDEM, "")

    # Process: Flow Direction
    arcpy.gp.FlowDirection_sa(fillDEM, flow_dir, "NORMAL", Output_drop_raster, "D8")

    # Process: Slope_d, slope in degree
    arcpy.gp.Slope_sa(DEM_f, slope_d, "DEGREE", "1", "PLANAR", "METER")

    # Process: Slope_P, slope in percentage
    arcpy.gp.Slope_sa(DEM_f, slope_p, "PERCENT_RISE", "1", "PLANAR", "METER")

    # Process: Flow Accumulation
    arcpy.gp.FlowAccumulation_sa(flow_dir, flow_acc, "", "FLOAT")

    # Process: Cal_Slope-length
    flow_func = "\"{flow_acc}\" * 150"
    flow_func = flow_func.format(flow_acc=flow_acc)
    arcpy.gp.RasterCalculator_sa(flow_func, slope_L)

    # Process: Cal_m-factor
    m_function = "Con(\"{slope_p}\" < 1, 0.2, Con((1 <= \"{slope_p}\") & (\"{slope_p}\"< 3), 0.3, " \
                 "Con((3 <= \"{slope_p}\") & (\"{slope_p}\" < 5), 0.4, 0.5)))"
    m_function = m_function.format(slope_p=slope_p)
    arcpy.gp.RasterCalculator_sa(m_function, M_f)

    # Process: Cal_L-factor
    l_function = "Power(\"{slope_L}\" / 22.13, \"{m}\")"
    l_function = l_function.format(slope_L=slope_L, m=M_f)
    arcpy.gp.RasterCalculator_sa(l_function, L_f)

    # Process: Cal_S-factor
    s_function = "Con(\"{slope_d}\" < 5, 10.80 * Sin(\"{slope_d}\" * 3.14159 / 180.0) + 0.03, " \
                 "Con((5 <= \"{slope_d}\") & (\"{slope_d}\" < 10), " \
                 "16.80 * Sin(\"{slope_d}\" * 3.14159 / 180.0)-0.5, " \
                 "Con((10 <= \"{slope_d}\") & (\"{slope_d}\" < 25), 20.20 *  " \
                 "Sin(\"{slope_d}\" * 3.14159 / 180.0)-1.24, 19.59 * Sin(\"{slope_d}\" * 3.14159 / 180.0)-5.61)))"
    s_function = s_function.format(slope_d=slope_d)
    arcpy.gp.RasterCalculator_sa(s_function, S_f)
    # *******************************************

    print(time.asctime(time.localtime(time.time())), end='')
    print("  ", end="")
    print("Calculating Soil Erosion......")

    # iteration
    for yr in year:   # research span, step
        arcpy.env.overwriteOutput = True

        print(time.asctime(time.localtime(time.time())), end='')
        print(":::", end="")
        print(yr, end="")
        print(" calculating soil erosion......")
        # input
        LUC_f = LUC.format(year=yr)
        NDVI_f = NDVI.format(year=yr)
        R_f = R.format(year=yr)

        # output
        C_f = C.format(year=yr)
        P_f = P.format(year=yr)
        SE_f = SE.format(year=yr)
        SE_table_f = SE_table.format(year=yr)

        # ****************C-factor*******************
        # Process: Classification
        c_func = "Con(\"{LUC}\" == 1, 1, 2)"
        c_func = c_func.format(LUC=LUC_f)
        arcpy.gp.RasterCalculator_sa(c_func, C_type)

        # Process: Cal_C-factor
        C_function = "Con(\"{types}\" == 1, 0.242857, " \
                     "Con(\"{types}\" == 2, Power((1 - \"{NDVI}\") / 2, 1 + \"{NDVI}\")))"
        C_function = C_function.format(types=C_type, NDVI=NDVI_f)
        arcpy.gp.RasterCalculator_sa(C_function, C_f)
        # *******************************************

        # ****************P-factor*******************
        # Process: Raster Calculator (SP)
        SP_func = "Con(\"{slope_d}\" < 4.6, 0.45, Con((4.6<= \"{slope_d}\") & (\"{slope_d}\" < 7), 0.52, " \
                  "Con((7<= \"{slope_d}\") & (\"{slope_d}\" < 9), 0.61, " \
                  "Con((9<= \"{slope_d}\") & (\"{slope_d}\" < 14), 0.7, " \
                  "Con((14<= \"{slope_d}\") & (\"{slope_d}\" < 24), 0.92, 1)))))"
        SP_func = SP_func.format(slope_d=slope_d)
        # print(P_s)
        arcpy.gp.RasterCalculator_sa(SP_func, P_s)

        # Process: Cal_LU
        LU_func = "Con(\"{LUC}\" == 1, 1, " \
                  "Con((\"{LUC}\" == 2) | (\"{LUC}\" == 3) | (\"{LUC}\" == 4) | (\"{LUC}\" == 7) | (\"{LUC}\" == 9), -1, 0))"
        LU_func = LU_func.format(LUC=LUC_f)
        arcpy.gp.RasterCalculator_sa(LU_func, LU)

        # Process: Raster Calculator (P_Sub)
        p_func = "\"{P_s}\" * \"{LU}\""
        p_func = p_func.format(P_s=P_s, LU=LU)
        arcpy.gp.RasterCalculator_sa(p_func, P_Sub)

        # Process: Cal_P-factor
        P_func = "Con(\"{P_Sub}\" < 0,1, \"{P_Sub}\")"
        P_func = P_func.format(P_Sub=P_Sub)
        arcpy.gp.RasterCalculator_sa(P_func, P_f)
        # *******************************************

        # *******************SE**********************
        # Process: Cal_RUSLE_se
        SE_func = "\"{C_f}\" * \"{K}\" * \"{P_f}\" * \"{S_f}\" * \"{L_f}\" * \"{R_f}\""
        SE_func = SE_func.format(C_f=C_f, K=K, P_f=P_f, S_f=S_f, L_f=L_f, R_f=R_f)
        arcpy.gp.RasterCalculator_sa(SE_func, SE_f)

        # Process: Zona_Stat_se
        arcpy.gp.ZonalStatisticsAsTable_sa(Zonal_area, "Id", SE_f, SE_table_f, "DATA", "ALL")

        print(time.asctime(time.localtime(time.time())), end='')
        print("  ", end="")
        print(yr, end="")
        print(" Successfully finished!!!")

print("Scrip is executed successfully!!!", end="")
print(time.asctime(time.localtime(time.time())), end='')
